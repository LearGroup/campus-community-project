package com.example.chen1.uncom.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, String> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property HeaderPic = new Property(3, String.class, "headerPic", false, "HEADER_PIC");
        public final static Property Province = new Property(4, String.class, "province", false, "PROVINCE");
        public final static Property Town = new Property(5, String.class, "town", false, "TOWN");
        public final static Property Area = new Property(6, String.class, "area", false, "AREA");
        public final static Property Sprovince = new Property(7, String.class, "sprovince", false, "SPROVINCE");
        public final static Property Stown = new Property(8, String.class, "stown", false, "STOWN");
        public final static Property Sarea = new Property(9, String.class, "sarea", false, "SAREA");
        public final static Property Email = new Property(10, String.class, "email", false, "EMAIL");
        public final static Property Phone = new Property(11, String.class, "phone", false, "PHONE");
        public final static Property Sex = new Property(12, Integer.class, "sex", false, "SEX");
        public final static Property CreateTime = new Property(13, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(14, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property IsDelete = new Property(15, Integer.class, "isDelete", false, "IS_DELETE");
        public final static Property QqNumber = new Property(16, String.class, "qqNumber", false, "QQ_NUMBER");
        public final static Property WexinNumber = new Property(17, String.class, "wexinNumber", false, "WEXIN_NUMBER");
        public final static Property Weibo = new Property(18, String.class, "weibo", false, "WEIBO");
        public final static Property StudentId = new Property(19, String.class, "studentId", false, "STUDENT_ID");
        public final static Property StudentIdPassword = new Property(20, String.class, "studentIdPassword", false, "STUDENT_ID_PASSWORD");
        public final static Property Age = new Property(21, Integer.class, "age", false, "AGE");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"PASSWORD\" TEXT," + // 2: password
                "\"HEADER_PIC\" TEXT," + // 3: headerPic
                "\"PROVINCE\" TEXT," + // 4: province
                "\"TOWN\" TEXT," + // 5: town
                "\"AREA\" TEXT," + // 6: area
                "\"SPROVINCE\" TEXT," + // 7: sprovince
                "\"STOWN\" TEXT," + // 8: stown
                "\"SAREA\" TEXT," + // 9: sarea
                "\"EMAIL\" TEXT," + // 10: email
                "\"PHONE\" TEXT," + // 11: phone
                "\"SEX\" INTEGER," + // 12: sex
                "\"CREATE_TIME\" TEXT," + // 13: createTime
                "\"UPDATE_TIME\" TEXT," + // 14: updateTime
                "\"IS_DELETE\" INTEGER," + // 15: isDelete
                "\"QQ_NUMBER\" TEXT," + // 16: qqNumber
                "\"WEXIN_NUMBER\" TEXT," + // 17: wexinNumber
                "\"WEIBO\" TEXT," + // 18: weibo
                "\"STUDENT_ID\" TEXT," + // 19: studentId
                "\"STUDENT_ID_PASSWORD\" TEXT," + // 20: studentIdPassword
                "\"AGE\" INTEGER);"); // 21: age
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String headerPic = entity.getHeaderPic();
        if (headerPic != null) {
            stmt.bindString(4, headerPic);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(5, province);
        }
 
        String town = entity.getTown();
        if (town != null) {
            stmt.bindString(6, town);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(7, area);
        }
 
        String sprovince = entity.getSprovince();
        if (sprovince != null) {
            stmt.bindString(8, sprovince);
        }
 
        String stown = entity.getStown();
        if (stown != null) {
            stmt.bindString(9, stown);
        }
 
        String sarea = entity.getSarea();
        if (sarea != null) {
            stmt.bindString(10, sarea);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(12, phone);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(13, sex);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(14, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(15, updateTime);
        }
 
        Integer isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindLong(16, isDelete);
        }
 
        String qqNumber = entity.getQqNumber();
        if (qqNumber != null) {
            stmt.bindString(17, qqNumber);
        }
 
        String wexinNumber = entity.getWexinNumber();
        if (wexinNumber != null) {
            stmt.bindString(18, wexinNumber);
        }
 
        String weibo = entity.getWeibo();
        if (weibo != null) {
            stmt.bindString(19, weibo);
        }
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(20, studentId);
        }
 
        String studentIdPassword = entity.getStudentIdPassword();
        if (studentIdPassword != null) {
            stmt.bindString(21, studentIdPassword);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(22, age);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String headerPic = entity.getHeaderPic();
        if (headerPic != null) {
            stmt.bindString(4, headerPic);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(5, province);
        }
 
        String town = entity.getTown();
        if (town != null) {
            stmt.bindString(6, town);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(7, area);
        }
 
        String sprovince = entity.getSprovince();
        if (sprovince != null) {
            stmt.bindString(8, sprovince);
        }
 
        String stown = entity.getStown();
        if (stown != null) {
            stmt.bindString(9, stown);
        }
 
        String sarea = entity.getSarea();
        if (sarea != null) {
            stmt.bindString(10, sarea);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(12, phone);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(13, sex);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(14, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(15, updateTime);
        }
 
        Integer isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindLong(16, isDelete);
        }
 
        String qqNumber = entity.getQqNumber();
        if (qqNumber != null) {
            stmt.bindString(17, qqNumber);
        }
 
        String wexinNumber = entity.getWexinNumber();
        if (wexinNumber != null) {
            stmt.bindString(18, wexinNumber);
        }
 
        String weibo = entity.getWeibo();
        if (weibo != null) {
            stmt.bindString(19, weibo);
        }
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(20, studentId);
        }
 
        String studentIdPassword = entity.getStudentIdPassword();
        if (studentIdPassword != null) {
            stmt.bindString(21, studentIdPassword);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(22, age);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // headerPic
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // province
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // town
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // area
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sprovince
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // stown
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sarea
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // phone
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // sex
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // createTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // updateTime
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // isDelete
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // qqNumber
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // wexinNumber
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // weibo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // studentId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // studentIdPassword
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21) // age
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeaderPic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProvince(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTown(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setArea(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSprovince(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStown(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSarea(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSex(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setCreateTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUpdateTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsDelete(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setQqNumber(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setWexinNumber(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setWeibo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setStudentId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setStudentIdPassword(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAge(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
