package com.example.chen1.uncom.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DYNAMICS_MESSAGE_BEAN".
*/
public class DynamicsMessageBeanDao extends AbstractDao<DynamicsMessageBean, Long> {

    public static final String TABLENAME = "DYNAMICS_MESSAGE_BEAN";

    /**
     * Properties of entity DynamicsMessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Like = new Property(1, boolean.class, "like", false, "LIKE");
        public final static Property Dynnamics_id = new Property(2, String.class, "dynnamics_id", false, "DYNNAMICS_ID");
        public final static Property Comment = new Property(3, String.class, "comment", false, "COMMENT");
        public final static Property User_id = new Property(4, String.class, "user_id", false, "USER_ID");
        public final static Property User_name = new Property(5, String.class, "user_name", false, "USER_NAME");
        public final static Property Header_pic = new Property(6, String.class, "header_pic", false, "HEADER_PIC");
    }


    public DynamicsMessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DynamicsMessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DYNAMICS_MESSAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LIKE\" INTEGER NOT NULL ," + // 1: like
                "\"DYNNAMICS_ID\" TEXT," + // 2: dynnamics_id
                "\"COMMENT\" TEXT," + // 3: comment
                "\"USER_ID\" TEXT," + // 4: user_id
                "\"USER_NAME\" TEXT," + // 5: user_name
                "\"HEADER_PIC\" TEXT);"); // 6: header_pic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DYNAMICS_MESSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DynamicsMessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLike() ? 1L: 0L);
 
        String dynnamics_id = entity.getDynnamics_id();
        if (dynnamics_id != null) {
            stmt.bindString(3, dynnamics_id);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(4, comment);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(5, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(6, user_name);
        }
 
        String header_pic = entity.getHeader_pic();
        if (header_pic != null) {
            stmt.bindString(7, header_pic);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DynamicsMessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLike() ? 1L: 0L);
 
        String dynnamics_id = entity.getDynnamics_id();
        if (dynnamics_id != null) {
            stmt.bindString(3, dynnamics_id);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(4, comment);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(5, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(6, user_name);
        }
 
        String header_pic = entity.getHeader_pic();
        if (header_pic != null) {
            stmt.bindString(7, header_pic);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DynamicsMessageBean readEntity(Cursor cursor, int offset) {
        DynamicsMessageBean entity = new DynamicsMessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // like
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dynnamics_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // comment
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // header_pic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DynamicsMessageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLike(cursor.getShort(offset + 1) != 0);
        entity.setDynnamics_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComment(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHeader_pic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DynamicsMessageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DynamicsMessageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DynamicsMessageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
