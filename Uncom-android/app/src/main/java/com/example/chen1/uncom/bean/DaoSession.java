package com.example.chen1.uncom.bean;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.example.chen1.uncom.bean.DynamicsMessageBean;
import com.example.chen1.uncom.bean.MessageHistoryBean;
import com.example.chen1.uncom.bean.NewRelationShipBean;
import com.example.chen1.uncom.bean.PersonDynamicsBean;
import com.example.chen1.uncom.bean.RelationShipLevelBean;
import com.example.chen1.uncom.bean.RoutineBean;
import com.example.chen1.uncom.bean.ThinkerBean;
import com.example.chen1.uncom.bean.UserBean;

import com.example.chen1.uncom.bean.DynamicsMessageBeanDao;
import com.example.chen1.uncom.bean.MessageHistoryBeanDao;
import com.example.chen1.uncom.bean.NewRelationShipBeanDao;
import com.example.chen1.uncom.bean.PersonDynamicsBeanDao;
import com.example.chen1.uncom.bean.RelationShipLevelBeanDao;
import com.example.chen1.uncom.bean.RoutineBeanDao;
import com.example.chen1.uncom.bean.ThinkerBeanDao;
import com.example.chen1.uncom.bean.UserBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig dynamicsMessageBeanDaoConfig;
    private final DaoConfig messageHistoryBeanDaoConfig;
    private final DaoConfig newRelationShipBeanDaoConfig;
    private final DaoConfig personDynamicsBeanDaoConfig;
    private final DaoConfig relationShipLevelBeanDaoConfig;
    private final DaoConfig routineBeanDaoConfig;
    private final DaoConfig thinkerBeanDaoConfig;
    private final DaoConfig userBeanDaoConfig;

    private final DynamicsMessageBeanDao dynamicsMessageBeanDao;
    private final MessageHistoryBeanDao messageHistoryBeanDao;
    private final NewRelationShipBeanDao newRelationShipBeanDao;
    private final PersonDynamicsBeanDao personDynamicsBeanDao;
    private final RelationShipLevelBeanDao relationShipLevelBeanDao;
    private final RoutineBeanDao routineBeanDao;
    private final ThinkerBeanDao thinkerBeanDao;
    private final UserBeanDao userBeanDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        dynamicsMessageBeanDaoConfig = daoConfigMap.get(DynamicsMessageBeanDao.class).clone();
        dynamicsMessageBeanDaoConfig.initIdentityScope(type);

        messageHistoryBeanDaoConfig = daoConfigMap.get(MessageHistoryBeanDao.class).clone();
        messageHistoryBeanDaoConfig.initIdentityScope(type);

        newRelationShipBeanDaoConfig = daoConfigMap.get(NewRelationShipBeanDao.class).clone();
        newRelationShipBeanDaoConfig.initIdentityScope(type);

        personDynamicsBeanDaoConfig = daoConfigMap.get(PersonDynamicsBeanDao.class).clone();
        personDynamicsBeanDaoConfig.initIdentityScope(type);

        relationShipLevelBeanDaoConfig = daoConfigMap.get(RelationShipLevelBeanDao.class).clone();
        relationShipLevelBeanDaoConfig.initIdentityScope(type);

        routineBeanDaoConfig = daoConfigMap.get(RoutineBeanDao.class).clone();
        routineBeanDaoConfig.initIdentityScope(type);

        thinkerBeanDaoConfig = daoConfigMap.get(ThinkerBeanDao.class).clone();
        thinkerBeanDaoConfig.initIdentityScope(type);

        userBeanDaoConfig = daoConfigMap.get(UserBeanDao.class).clone();
        userBeanDaoConfig.initIdentityScope(type);

        dynamicsMessageBeanDao = new DynamicsMessageBeanDao(dynamicsMessageBeanDaoConfig, this);
        messageHistoryBeanDao = new MessageHistoryBeanDao(messageHistoryBeanDaoConfig, this);
        newRelationShipBeanDao = new NewRelationShipBeanDao(newRelationShipBeanDaoConfig, this);
        personDynamicsBeanDao = new PersonDynamicsBeanDao(personDynamicsBeanDaoConfig, this);
        relationShipLevelBeanDao = new RelationShipLevelBeanDao(relationShipLevelBeanDaoConfig, this);
        routineBeanDao = new RoutineBeanDao(routineBeanDaoConfig, this);
        thinkerBeanDao = new ThinkerBeanDao(thinkerBeanDaoConfig, this);
        userBeanDao = new UserBeanDao(userBeanDaoConfig, this);

        registerDao(DynamicsMessageBean.class, dynamicsMessageBeanDao);
        registerDao(MessageHistoryBean.class, messageHistoryBeanDao);
        registerDao(NewRelationShipBean.class, newRelationShipBeanDao);
        registerDao(PersonDynamicsBean.class, personDynamicsBeanDao);
        registerDao(RelationShipLevelBean.class, relationShipLevelBeanDao);
        registerDao(RoutineBean.class, routineBeanDao);
        registerDao(ThinkerBean.class, thinkerBeanDao);
        registerDao(UserBean.class, userBeanDao);
    }
    
    public void clear() {
        dynamicsMessageBeanDaoConfig.clearIdentityScope();
        messageHistoryBeanDaoConfig.clearIdentityScope();
        newRelationShipBeanDaoConfig.clearIdentityScope();
        personDynamicsBeanDaoConfig.clearIdentityScope();
        relationShipLevelBeanDaoConfig.clearIdentityScope();
        routineBeanDaoConfig.clearIdentityScope();
        thinkerBeanDaoConfig.clearIdentityScope();
        userBeanDaoConfig.clearIdentityScope();
    }

    public DynamicsMessageBeanDao getDynamicsMessageBeanDao() {
        return dynamicsMessageBeanDao;
    }

    public MessageHistoryBeanDao getMessageHistoryBeanDao() {
        return messageHistoryBeanDao;
    }

    public NewRelationShipBeanDao getNewRelationShipBeanDao() {
        return newRelationShipBeanDao;
    }

    public PersonDynamicsBeanDao getPersonDynamicsBeanDao() {
        return personDynamicsBeanDao;
    }

    public RelationShipLevelBeanDao getRelationShipLevelBeanDao() {
        return relationShipLevelBeanDao;
    }

    public RoutineBeanDao getRoutineBeanDao() {
        return routineBeanDao;
    }

    public ThinkerBeanDao getThinkerBeanDao() {
        return thinkerBeanDao;
    }

    public UserBeanDao getUserBeanDao() {
        return userBeanDao;
    }

}
