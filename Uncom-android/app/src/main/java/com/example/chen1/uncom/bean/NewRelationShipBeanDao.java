package com.example.chen1.uncom.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_RELATION_SHIP_BEAN".
*/
public class NewRelationShipBeanDao extends AbstractDao<NewRelationShipBean, Long> {

    public static final String TABLENAME = "NEW_RELATION_SHIP_BEAN";

    /**
     * Properties of entity NewRelationShipBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property Header_pic = new Property(2, String.class, "header_pic", false, "HEADER_PIC");
        public final static Property Results = new Property(3, String.class, "results", false, "RESULTS");
        public final static Property Get_time = new Property(4, java.util.Date.class, "get_time", false, "GET_TIME");
        public final static Property Short_message = new Property(5, String.class, "short_message", false, "SHORT_MESSAGE");
        public final static Property Result_type = new Property(6, Integer.class, "result_type", false, "RESULT_TYPE");
        public final static Property User_name = new Property(7, String.class, "user_name", false, "USER_NAME");
        public final static Property View_type = new Property(8, Integer.class, "view_type", false, "VIEW_TYPE");
        public final static Property Sprovince = new Property(9, String.class, "sprovince", false, "SPROVINCE");
        public final static Property Stown = new Property(10, String.class, "stown", false, "STOWN");
        public final static Property Sarea = new Property(11, String.class, "sarea", false, "SAREA");
        public final static Property Sex = new Property(12, Integer.class, "sex", false, "SEX");
        public final static Property User_id = new Property(13, String.class, "user_id", false, "USER_ID");
    }


    public NewRelationShipBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NewRelationShipBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_RELATION_SHIP_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER," + // 1: type
                "\"HEADER_PIC\" TEXT," + // 2: header_pic
                "\"RESULTS\" TEXT," + // 3: results
                "\"GET_TIME\" INTEGER," + // 4: get_time
                "\"SHORT_MESSAGE\" TEXT," + // 5: short_message
                "\"RESULT_TYPE\" INTEGER," + // 6: result_type
                "\"USER_NAME\" TEXT," + // 7: user_name
                "\"VIEW_TYPE\" INTEGER," + // 8: view_type
                "\"SPROVINCE\" TEXT," + // 9: sprovince
                "\"STOWN\" TEXT," + // 10: stown
                "\"SAREA\" TEXT," + // 11: sarea
                "\"SEX\" INTEGER," + // 12: sex
                "\"USER_ID\" TEXT);"); // 13: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_RELATION_SHIP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewRelationShipBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        String header_pic = entity.getHeader_pic();
        if (header_pic != null) {
            stmt.bindString(3, header_pic);
        }
 
        String results = entity.getResults();
        if (results != null) {
            stmt.bindString(4, results);
        }
 
        java.util.Date get_time = entity.getGet_time();
        if (get_time != null) {
            stmt.bindLong(5, get_time.getTime());
        }
 
        String short_message = entity.getShort_message();
        if (short_message != null) {
            stmt.bindString(6, short_message);
        }
 
        Integer result_type = entity.getResult_type();
        if (result_type != null) {
            stmt.bindLong(7, result_type);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(8, user_name);
        }
 
        Integer view_type = entity.getView_type();
        if (view_type != null) {
            stmt.bindLong(9, view_type);
        }
 
        String sprovince = entity.getSprovince();
        if (sprovince != null) {
            stmt.bindString(10, sprovince);
        }
 
        String stown = entity.getStown();
        if (stown != null) {
            stmt.bindString(11, stown);
        }
 
        String sarea = entity.getSarea();
        if (sarea != null) {
            stmt.bindString(12, sarea);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(13, sex);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(14, user_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewRelationShipBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        String header_pic = entity.getHeader_pic();
        if (header_pic != null) {
            stmt.bindString(3, header_pic);
        }
 
        String results = entity.getResults();
        if (results != null) {
            stmt.bindString(4, results);
        }
 
        java.util.Date get_time = entity.getGet_time();
        if (get_time != null) {
            stmt.bindLong(5, get_time.getTime());
        }
 
        String short_message = entity.getShort_message();
        if (short_message != null) {
            stmt.bindString(6, short_message);
        }
 
        Integer result_type = entity.getResult_type();
        if (result_type != null) {
            stmt.bindLong(7, result_type);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(8, user_name);
        }
 
        Integer view_type = entity.getView_type();
        if (view_type != null) {
            stmt.bindLong(9, view_type);
        }
 
        String sprovince = entity.getSprovince();
        if (sprovince != null) {
            stmt.bindString(10, sprovince);
        }
 
        String stown = entity.getStown();
        if (stown != null) {
            stmt.bindString(11, stown);
        }
 
        String sarea = entity.getSarea();
        if (sarea != null) {
            stmt.bindString(12, sarea);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(13, sex);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(14, user_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewRelationShipBean readEntity(Cursor cursor, int offset) {
        NewRelationShipBean entity = new NewRelationShipBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // header_pic
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // results
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // get_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // short_message
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // result_type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_name
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // view_type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sprovince
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // stown
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sarea
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // sex
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // user_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewRelationShipBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setHeader_pic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResults(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGet_time(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setShort_message(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResult_type(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUser_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setView_type(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSprovince(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStown(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSarea(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSex(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setUser_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewRelationShipBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewRelationShipBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewRelationShipBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
