package com.example.chen1.uncom.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_DYNAMICS_BEAN".
*/
public class PersonDynamicsBeanDao extends AbstractDao<PersonDynamicsBean, String> {

    public static final String TABLENAME = "PERSON_DYNAMICS_BEAN";

    /**
     * Properties of entity PersonDynamicsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property User_photo = new Property(3, String.class, "user_photo", false, "USER_PHOTO");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Photo_list = new Property(5, String.class, "photo_list", false, "PHOTO_LIST");
        public final static Property Photo_online_list = new Property(6, String.class, "photo_online_list", false, "PHOTO_ONLINE_LIST");
        public final static Property Create_time = new Property(7, java.util.Date.class, "create_time", false, "CREATE_TIME");
        public final static Property Like_count = new Property(8, Integer.class, "like_count", false, "LIKE_COUNT");
        public final static Property Comment_count = new Property(9, Integer.class, "comment_count", false, "COMMENT_COUNT");
        public final static Property Edit = new Property(10, Integer.class, "edit", false, "EDIT");
        public final static Property Comment = new Property(11, String.class, "comment", false, "COMMENT");
        public final static Property Like = new Property(12, String.class, "like", false, "LIKE");
    }


    public PersonDynamicsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDynamicsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_DYNAMICS_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"USERNAME\" TEXT," + // 2: username
                "\"USER_PHOTO\" TEXT," + // 3: user_photo
                "\"CONTENT\" TEXT," + // 4: content
                "\"PHOTO_LIST\" TEXT," + // 5: photo_list
                "\"PHOTO_ONLINE_LIST\" TEXT," + // 6: photo_online_list
                "\"CREATE_TIME\" INTEGER," + // 7: create_time
                "\"LIKE_COUNT\" INTEGER," + // 8: like_count
                "\"COMMENT_COUNT\" INTEGER," + // 9: comment_count
                "\"EDIT\" INTEGER," + // 10: edit
                "\"COMMENT\" TEXT," + // 11: comment
                "\"LIKE\" TEXT);"); // 12: like
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_DYNAMICS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonDynamicsBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String user_photo = entity.getUser_photo();
        if (user_photo != null) {
            stmt.bindString(4, user_photo);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String photo_list = entity.getPhoto_list();
        if (photo_list != null) {
            stmt.bindString(6, photo_list);
        }
 
        String photo_online_list = entity.getPhoto_online_list();
        if (photo_online_list != null) {
            stmt.bindString(7, photo_online_list);
        }
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(8, create_time.getTime());
        }
 
        Integer like_count = entity.getLike_count();
        if (like_count != null) {
            stmt.bindLong(9, like_count);
        }
 
        Integer comment_count = entity.getComment_count();
        if (comment_count != null) {
            stmt.bindLong(10, comment_count);
        }
 
        Integer edit = entity.getEdit();
        if (edit != null) {
            stmt.bindLong(11, edit);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(12, comment);
        }
 
        String like = entity.getLike();
        if (like != null) {
            stmt.bindString(13, like);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonDynamicsBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String user_photo = entity.getUser_photo();
        if (user_photo != null) {
            stmt.bindString(4, user_photo);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String photo_list = entity.getPhoto_list();
        if (photo_list != null) {
            stmt.bindString(6, photo_list);
        }
 
        String photo_online_list = entity.getPhoto_online_list();
        if (photo_online_list != null) {
            stmt.bindString(7, photo_online_list);
        }
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(8, create_time.getTime());
        }
 
        Integer like_count = entity.getLike_count();
        if (like_count != null) {
            stmt.bindLong(9, like_count);
        }
 
        Integer comment_count = entity.getComment_count();
        if (comment_count != null) {
            stmt.bindLong(10, comment_count);
        }
 
        Integer edit = entity.getEdit();
        if (edit != null) {
            stmt.bindLong(11, edit);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(12, comment);
        }
 
        String like = entity.getLike();
        if (like != null) {
            stmt.bindString(13, like);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PersonDynamicsBean readEntity(Cursor cursor, int offset) {
        PersonDynamicsBean entity = new PersonDynamicsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_photo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // photo_list
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // photo_online_list
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // create_time
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // like_count
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // comment_count
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // edit
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // comment
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // like
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonDynamicsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_photo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoto_list(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoto_online_list(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreate_time(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setLike_count(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setComment_count(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setEdit(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setComment(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLike(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PersonDynamicsBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(PersonDynamicsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PersonDynamicsBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
