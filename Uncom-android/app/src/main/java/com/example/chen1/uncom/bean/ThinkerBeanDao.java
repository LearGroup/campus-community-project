package com.example.chen1.uncom.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THINKER_BEAN".
*/
public class ThinkerBeanDao extends AbstractDao<ThinkerBean, Long> {

    public static final String TABLENAME = "THINKER_BEAN";

    /**
     * Properties of entity ThinkerBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property ImgCacheUrl = new Property(1, String.class, "imgCacheUrl", false, "IMG_CACHE_URL");
        public final static Property ImgOnlineUrl = new Property(2, String.class, "imgOnlineUrl", false, "IMG_ONLINE_URL");
        public final static Property ImgUrl = new Property(3, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property AuthorId = new Property(5, String.class, "authorId", false, "AUTHOR_ID");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property CreateTime = new Property(7, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ChangeTime = new Property(8, java.util.Date.class, "changeTime", false, "CHANGE_TIME");
        public final static Property Addr = new Property(9, String.class, "addr", false, "ADDR");
        public final static Property BackColor = new Property(10, String.class, "backColor", false, "BACK_COLOR");
        public final static Property ToMain = new Property(11, boolean.class, "toMain", false, "TO_MAIN");
        public final static Property ToMainTime = new Property(12, java.util.Date.class, "toMainTime", false, "TO_MAIN_TIME");
        public final static Property ToTop = new Property(13, boolean.class, "toTop", false, "TO_TOP");
        public final static Property Tag = new Property(14, String.class, "tag", false, "TAG");
    }


    public ThinkerBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ThinkerBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THINKER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"IMG_CACHE_URL\" TEXT," + // 1: imgCacheUrl
                "\"IMG_ONLINE_URL\" TEXT," + // 2: imgOnlineUrl
                "\"IMG_URL\" TEXT," + // 3: imgUrl
                "\"CONTENT\" TEXT," + // 4: content
                "\"AUTHOR_ID\" TEXT," + // 5: authorId
                "\"TITLE\" TEXT," + // 6: title
                "\"CREATE_TIME\" INTEGER," + // 7: createTime
                "\"CHANGE_TIME\" INTEGER," + // 8: changeTime
                "\"ADDR\" TEXT," + // 9: addr
                "\"BACK_COLOR\" TEXT," + // 10: backColor
                "\"TO_MAIN\" INTEGER NOT NULL ," + // 11: toMain
                "\"TO_MAIN_TIME\" INTEGER," + // 12: toMainTime
                "\"TO_TOP\" INTEGER NOT NULL ," + // 13: toTop
                "\"TAG\" TEXT);"); // 14: tag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THINKER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ThinkerBean entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String imgCacheUrl = entity.getImgCacheUrl();
        if (imgCacheUrl != null) {
            stmt.bindString(2, imgCacheUrl);
        }
 
        String imgOnlineUrl = entity.getImgOnlineUrl();
        if (imgOnlineUrl != null) {
            stmt.bindString(3, imgOnlineUrl);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(4, imgUrl);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String authorId = entity.getAuthorId();
        if (authorId != null) {
            stmt.bindString(6, authorId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(8, createTime.getTime());
        }
 
        java.util.Date changeTime = entity.getChangeTime();
        if (changeTime != null) {
            stmt.bindLong(9, changeTime.getTime());
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(10, addr);
        }
 
        String backColor = entity.getBackColor();
        if (backColor != null) {
            stmt.bindString(11, backColor);
        }
        stmt.bindLong(12, entity.getToMain() ? 1L: 0L);
 
        java.util.Date toMainTime = entity.getToMainTime();
        if (toMainTime != null) {
            stmt.bindLong(13, toMainTime.getTime());
        }
        stmt.bindLong(14, entity.getToTop() ? 1L: 0L);
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(15, tag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ThinkerBean entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String imgCacheUrl = entity.getImgCacheUrl();
        if (imgCacheUrl != null) {
            stmt.bindString(2, imgCacheUrl);
        }
 
        String imgOnlineUrl = entity.getImgOnlineUrl();
        if (imgOnlineUrl != null) {
            stmt.bindString(3, imgOnlineUrl);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(4, imgUrl);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String authorId = entity.getAuthorId();
        if (authorId != null) {
            stmt.bindString(6, authorId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(8, createTime.getTime());
        }
 
        java.util.Date changeTime = entity.getChangeTime();
        if (changeTime != null) {
            stmt.bindLong(9, changeTime.getTime());
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(10, addr);
        }
 
        String backColor = entity.getBackColor();
        if (backColor != null) {
            stmt.bindString(11, backColor);
        }
        stmt.bindLong(12, entity.getToMain() ? 1L: 0L);
 
        java.util.Date toMainTime = entity.getToMainTime();
        if (toMainTime != null) {
            stmt.bindLong(13, toMainTime.getTime());
        }
        stmt.bindLong(14, entity.getToTop() ? 1L: 0L);
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(15, tag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ThinkerBean readEntity(Cursor cursor, int offset) {
        ThinkerBean entity = new ThinkerBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imgCacheUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imgOnlineUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imgUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // authorId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // createTime
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // changeTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // addr
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // backColor
            cursor.getShort(offset + 11) != 0, // toMain
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // toMainTime
            cursor.getShort(offset + 13) != 0, // toTop
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // tag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ThinkerBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImgCacheUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImgOnlineUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImgUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthorId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setChangeTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setAddr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBackColor(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setToMain(cursor.getShort(offset + 11) != 0);
        entity.setToMainTime(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setToTop(cursor.getShort(offset + 13) != 0);
        entity.setTag(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ThinkerBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ThinkerBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ThinkerBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
