package com.example.chen1.uncom.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_HISTORY_BEAN".
*/
public class MessageHistoryBeanDao extends AbstractDao<MessageHistoryBean, Long> {

    public static final String TABLENAME = "MESSAGE_HISTORY_BEAN";

    /**
     * Properties of entity MessageHistoryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OwnId = new Property(1, String.class, "ownId", false, "OWN_ID");
        public final static Property TargetId = new Property(2, String.class, "targetId", false, "TARGET_ID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Time = new Property(4, java.util.Date.class, "time", false, "TIME");
        public final static Property Looke = new Property(5, boolean.class, "looke", false, "LOOKE");
        public final static Property MessageType = new Property(6, boolean.class, "MessageType", false, "MESSAGE_TYPE");
    }


    public MessageHistoryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MessageHistoryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_HISTORY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OWN_ID\" TEXT," + // 1: ownId
                "\"TARGET_ID\" TEXT," + // 2: targetId
                "\"CONTENT\" TEXT," + // 3: content
                "\"TIME\" INTEGER," + // 4: time
                "\"LOOKE\" INTEGER NOT NULL ," + // 5: looke
                "\"MESSAGE_TYPE\" INTEGER NOT NULL );"); // 6: MessageType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_HISTORY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageHistoryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ownId = entity.getOwnId();
        if (ownId != null) {
            stmt.bindString(2, ownId);
        }
 
        String targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindString(3, targetId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time.getTime());
        }
        stmt.bindLong(6, entity.getLooke() ? 1L: 0L);
        stmt.bindLong(7, entity.getMessageType() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageHistoryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ownId = entity.getOwnId();
        if (ownId != null) {
            stmt.bindString(2, ownId);
        }
 
        String targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindString(3, targetId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time.getTime());
        }
        stmt.bindLong(6, entity.getLooke() ? 1L: 0L);
        stmt.bindLong(7, entity.getMessageType() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageHistoryBean readEntity(Cursor cursor, int offset) {
        MessageHistoryBean entity = new MessageHistoryBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ownId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // targetId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // time
            cursor.getShort(offset + 5) != 0, // looke
            cursor.getShort(offset + 6) != 0 // MessageType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageHistoryBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOwnId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTargetId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setLooke(cursor.getShort(offset + 5) != 0);
        entity.setMessageType(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageHistoryBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageHistoryBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageHistoryBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
